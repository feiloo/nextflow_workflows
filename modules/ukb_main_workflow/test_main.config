manifest {
  homePage = 'https://github.com/feiloo/ngs_pipeline'
  description = 'nextflow module wrapper for qiagen clc server'
  mainScript = 'main.nf'
  version = '0.0.1'
}


nextflow.enable.strict = true
nextflow.enable.moduleBinaries = true
nextflow.enable.dsl = 2
workDir = "$NEXTFLOW_WORKDIR_CUSTOM"
offline = true
cleanup = false


// create unique workflow ids through timestamps
// the ids are used for structured outputs
import java.time.Instant
Instant inst = Instant.now()
workflow_id = inst.toString()


executor.cpus = Runtime.runtime.availableProcessors()
// the runtime.maxMemory is 1/4 of total ram, bc thats what the java runtime uses
//executor.memory = 0.8 * 4 * Runtime.runtime.maxMemory()
executor.memory = "56.GB"

// profiles for are mutually exclusive for simplicity
// when needing a combination or different profile, just add it as its own profile here
profiles {
  standard {
    // local, single-node, dependencies via conda

    // deactivate publishing by default, so we dont spam outputs and waste storage
    process {
      publishDir = ["enabled":false]
      withName: '.*' {
              cpus = executor.cpus
              memory = executor.memory
      }
    }
    conda {
      enabled = true
      conda.cacheDir = '$HOME/.cache/nextflow_conda_cache'
    }
  }

  fully_native {
    // local, single-node, dependencies must be installed locally and be on PATH env-var

    // deactivate publishing by default, so we dont spam outputs and waste storage
    process {
      publishDir = ["enabled":false]
      withName: '.*' {
              cpus = executor.cpus
              memory = executor.memory
      }
    }
  }


  local_nas_workdir {
    // deactivate publishing by default, so we dont spam outputs and waste storage
    process {
      publishDir = ["enabled":false]
      withName: '.*' {
              cpus = executor.cpus
              memory = executor.memory
      }
      // nas filesystems dont support symlinks, therefore use scratch and stage files through copying
      stageInMode = 'copy'
      stageOutMode = 'copy'
      scratch = '/scratch'
    }

    conda {
      enabled = true
      conda.cacheDir = '$HOME/.cache/nextflow_conda_cache'
    }
  }

  hpc {
    process {
      publishDir = ["enabled":false]
      withName: '.*' {
              cpus = executor.cpus
              memory = executor.memory
      }
      // nas filesystems dont support symlinks, therefore use scratch and stage files through copying
      stageInMode = 'copy'
      stageOutMode = 'copy'
      scratch = '/scratch'
      executor = 'slurm'
    }
    conda {
      enabled = true
      conda.cacheDir = '$HOME/.cache/nextflow_conda_cache'
    }
  }
}

includeConfig "$NEXTFLOW_MODULES/variantinterpretation/nextflow.config"

params {
  // general input-output params
  output_dir = "$NEXTFLOW_OUTPUTDIR_CUSTOM/${workflow_id}"
  outdir = "$NEXTFLOW_OUTPUTDIR_CUSTOM/${workflow_id}"
  workdir = "$NEXTFLOW_WORKDIR_CUSTOM"

  // full paths, to where inputs and outputs should be moved to on the network attached storage
  nas_import_dir = "$NAS_IMPORT_DIR"
  nas_export_dir = "$NAS_EXPORT_DIR"

  // references and other data
  reference_data = "$NGS_REFERENCE_DIR/arriba_reference/GRCh38+GENCODE38/"

  // gatk reference genome
  refgenome = "$NGS_REFERENCE_DIR/sarek_reference/gatk_grch38/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38.fasta"

  //gatk intervals
  intervals = "$NGS_REFERENCE_DIR/sarek_reference/gatk_grch38/Homo_sapiens/GATK/GRCh38/Annotation/intervals/wgs_calling_regions_noseconds.hg38.bed"

  //gatk panel of normals
  panel_of_normals = "$NGS_REFERENCE_DIR/sarek_reference/gatk_grch38/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/1000g_pon.hg38.vcf.gz"

  // germline resource (gnomad)
  germline_resource = "$NGS_REFERENCE_DIR/sarek_reference/gatk_grch38/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/af-only-gnomad.hg38.vcf.gz"

  // dbsnp reference for gatk recalibration
  known_sites = "$NGS_REFERENCE_DIR/sarek_reference/gatk_grch38/Homo_sapiens/GATK/GRCh38/Annotation/GATKBundle/dbsnp_146.hg38.vcf.gz"

  // clc tool specific params
  clc_workflow_name = '"name_of_clc_workflow"'

  // full filepaths to the import export directories on the clc server master node
  clc_import_dir = ''
  clc_export_dir = ''
  clc_destdir = ''

  // cio variantinterpretation specific params
  input = "$PRIVATE_TESTDATA_DIR/samplesheets/samplesheet_cio_vcf.csv"
  fasta = "$NGS_REFERENCE_DIR/ncbi_grch38_wholegenomefasta_genome.fa"
  vep_cache = "$NGS_REFERENCE_DIR/vep_cache/108/indexed/"


  // bwa params
  // run slower but save memory by using bwa, not bwa2 (bwamem2)
  bwa_tool = 'bwa'

}

report {
  enabled = true
  overwrite = true
  file = "${params.output_dir}/report.html"
}

timeline {
  enabled = true
  overwrite = true
  file = "${params.output_dir}/timeline.html"
}

trace {
  enabled = true
  overwrite = true
  file = "${params.output_dir}/trace.txt"
}

dag {
  enabled = true
  overwrite = true
  file = "${params.output_dir}/dag.dot"
}

